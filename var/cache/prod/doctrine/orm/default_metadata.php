<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Animal__CLASSMETADATA__' => 0,
'App__Entity__AnimalFeeding__CLASSMETADATA__' => 1,
'App__Entity__Habitat__CLASSMETADATA__' => 2,
'App__Entity__Review__CLASSMETADATA__' => 3,
'App__Entity__Schedule__CLASSMETADATA__' => 4,
'App__Entity__Service__CLASSMETADATA__' => 5,
'App__Entity__User__CLASSMETADATA__' => 6,
'App__Entity__VeterinaryReport__CLASSMETADATA__' => 7,
'App__Entity__Contact__CLASSMETADATA__' => 8,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Animal',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AnimalRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'race' => $o[3],
                        'image' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'race' => 'race',
                        'image' => 'image',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'race' => 'race',
                        'image' => 'image',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'animal',
                    ],
                ],
                'associationMappings' => [
                    [
                        'habitat' => $o[5],
                        'veterinaryReports' => $o[7],
                        'animalFeedings' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Animal',
                    6 => 'habitat_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'race',
                    'image',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'race',
                    'image',
                ],
                'length' => [
                    2 => 150,
                    150,
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                    2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\Animal',
                    7 => 'App\\Entity\\Animal',
                    'App\\Entity\\Animal',
                ],
                'inversedBy' => [
                    5 => 'animals',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'habitat_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'habitat_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'habitat_id' => 'habitat_id',
                    ],
                ],
                'unique' => [
                    6 => false,
                ],
                'nullable' => [
                    6 => false,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                ],
                'cascade' => [
                    7 => [
                        'remove',
                    ],
                    [
                        'remove',
                    ],
                ],
                'mappedBy' => [
                    7 => 'animal',
                    'animal',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'habitat',
                    7 => 'veterinaryReports',
                    'animalFeedings',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Habitat',
                    7 => 'App\\Entity\\VeterinaryReport',
                    'App\\Entity\\AnimalFeeding',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AnimalFeeding',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AnimalFeedingRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'feeding_date' => $o[2],
                        'food' => $o[3],
                        'quantity' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'feeding_date' => 'feeding_date',
                        'food' => 'food',
                        'quantity' => 'quantity',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'feeding_date' => 'feeding_date',
                        'food' => 'food',
                        'quantity' => 'quantity',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'animal_feeding',
                    ],
                ],
                'associationMappings' => [
                    [
                        'animal' => $o[5],
                        'user' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\AnimalFeeding',
                    6 => 'animal_id',
                    8 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'string',
                    'decimal',
                ],
                'fieldName' => [
                    1 => 'id',
                    'feeding_date',
                    'food',
                    'quantity',
                ],
                'columnName' => [
                    1 => 'id',
                    'feeding_date',
                    'food',
                    'quantity',
                ],
                'length' => [
                    3 => 100,
                ],
                'precision' => [
                    4 => 5,
                ],
                'scale' => [
                    4 => 2,
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\AnimalFeeding',
                    7 => 'App\\Entity\\AnimalFeeding',
                ],
                'inversedBy' => [
                    5 => 'animalFeedings',
                    7 => 'animalFeedings',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'animal_id' => 'id',
                    ],
                    7 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'animal_id',
                    ],
                    7 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'animal_id' => 'animal_id',
                    ],
                    7 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'unique' => [
                    6 => false,
                    8 => false,
                ],
                'nullable' => [
                    6 => false,
                    8 => false,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                    8 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'animal',
                    7 => 'user',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Animal',
                    7 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Habitat',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\HabitatRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'description' => $o[3],
                        'comment' => $o[4],
                        'image' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'comment' => 'comment',
                        'image' => 'image',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'comment' => 'comment',
                        'image' => 'image',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'habitat',
                    ],
                ],
                'associationMappings' => [
                    [
                        'animals' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\Habitat',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'text',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'comment',
                    'image',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'comment',
                    'image',
                ],
                'length' => [
                    2 => 100,
                ],
                'fetch' => [
                    6 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Habitat',
                ],
                'mappedBy' => [
                    6 => 'habitat',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'animals',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Animal',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Review',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ReviewRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'pseudo' => $o[2],
                        'comment' => $o[3],
                        'valid' => $o[4],
                        'submittedAt' => $o[5],
                        'rating' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'pseudo' => 'pseudo',
                        'comment' => 'comment',
                        'valid' => 'valid',
                        'submitted_at' => 'submittedAt',
                        'rating' => 'rating',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'pseudo' => 'pseudo',
                        'comment' => 'comment',
                        'valid' => 'valid',
                        'submittedAt' => 'submitted_at',
                        'rating' => 'rating',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'review',
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\Review',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'boolean',
                    'datetime',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'pseudo',
                    'comment',
                    'valid',
                    'submittedAt',
                    'rating',
                ],
                'columnName' => [
                    1 => 'id',
                    'pseudo',
                    'comment',
                    'valid',
                    'submitted_at',
                    'rating',
                ],
                'length' => [
                    2 => 30,
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Schedule',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ScheduleRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'day' => $o[2],
                        'opening_time' => $o[3],
                        'closing_time' => $o[4],
                        'isClosed' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'day' => 'day',
                        'opening_time' => 'opening_time',
                        'closing_time' => 'closing_time',
                        'is_closed' => 'isClosed',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'day' => 'day',
                        'opening_time' => 'opening_time',
                        'closing_time' => 'closing_time',
                        'isClosed' => 'is_closed',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'schedule',
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Schedule',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'time',
                    'time',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'day',
                    'opening_time',
                    'closing_time',
                    'isClosed',
                ],
                'columnName' => [
                    1 => 'id',
                    'day',
                    'opening_time',
                    'closing_time',
                    'is_closed',
                ],
                'length' => [
                    2 => 30,
                ],
                'nullable' => [
                    3 => true,
                    true,
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Service',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ServiceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'description' => $o[3],
                        'image' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'image' => 'image',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'image' => 'image',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'service',
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Service',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'image',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'image',
                ],
                'length' => [
                    2 => 100,
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UserRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'email' => $o[2],
                        'password' => $o[3],
                        'resetPasswordToken' => $o[4],
                        'roles' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'password' => 'password',
                        'reset_password_token' => 'resetPasswordToken',
                        'roles' => 'roles',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'password' => 'password',
                        'resetPasswordToken' => 'reset_password_token',
                        'roles' => 'roles',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'user',
                    ],
                ],
                'associationMappings' => [
                    [
                        'veterinaryReports' => $o[6],
                        'animalFeedings' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\User',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'email',
                    'password',
                    'resetPasswordToken',
                    'roles',
                ],
                'columnName' => [
                    1 => 'id',
                    'email',
                    'password',
                    'reset_password_token',
                    'roles',
                ],
                'length' => [
                    2 => 255,
                    255,
                    64,
                ],
                'nullable' => [
                    4 => true,
                ],
                'fetch' => [
                    6 => 2,
                    2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'mappedBy' => [
                    6 => 'user_id',
                    'user_id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'veterinaryReports',
                    'animalFeedings',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\VeterinaryReport',
                    'App\\Entity\\AnimalFeeding',
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\VeterinaryReport',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\VeterinaryReportRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'health_status' => $o[2],
                        'food' => $o[3],
                        'food_weight' => $o[4],
                        'report_date' => $o[5],
                        'detail' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'health_status' => 'health_status',
                        'food' => 'food',
                        'food_weight' => 'food_weight',
                        'report_date' => 'report_date',
                        'detail' => 'detail',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'health_status' => 'health_status',
                        'food' => 'food',
                        'food_weight' => 'food_weight',
                        'report_date' => 'report_date',
                        'detail' => 'detail',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'veterinary_report',
                    ],
                ],
                'associationMappings' => [
                    [
                        'animal' => $o[7],
                        'user' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\VeterinaryReport',
                    8 => 'animal_id',
                    10 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'string',
                    'decimal',
                    'datetime',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'health_status',
                    'food',
                    'food_weight',
                    'report_date',
                    'detail',
                ],
                'columnName' => [
                    1 => 'id',
                    'health_status',
                    'food',
                    'food_weight',
                    'report_date',
                    'detail',
                ],
                'length' => [
                    3 => 100,
                ],
                'precision' => [
                    4 => 5,
                ],
                'scale' => [
                    4 => 2,
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\VeterinaryReport',
                    9 => 'App\\Entity\\VeterinaryReport',
                ],
                'inversedBy' => [
                    7 => 'veterinaryReports',
                    9 => 'veterinaryReports',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'animal_id' => 'id',
                    ],
                    9 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'animal_id',
                    ],
                    9 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'animal_id' => 'animal_id',
                    ],
                    9 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'unique' => [
                    8 => false,
                    10 => false,
                ],
                'nullable' => [
                    8 => false,
                    10 => false,
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    10 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'animal',
                    9 => 'user',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Animal',
                    9 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
8 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Contact',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ContactRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'description' => $o[3],
                        'email' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'email' => 'email',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'email' => 'email',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'contact',
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Contact',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'email',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'email',
                ],
                'length' => [
                    2 => 255,
                    4 => 255,
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
